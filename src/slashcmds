#include "chess.h"

std::string ChessCommand::get_trigger()
{
	return "chess";
}

std::string ChessCommand::get_description()
{
	return "Creates a Lichess.org game";
}

uint64_t ChessCommand::get_required_perms()
{
	return dpp::p_use_application_commands;
}

void ChessCommand::execute(dpp::cluster& bot, const dpp::slashcommand_t& event, sqlite3* db)
{
	std::string url = "https://lichess.org/api/challenge/open?variant=standard";

	bot.request(url, dpp::m_post, [event](const dpp::http_request_completion_t& cc) {
		try {
			nlohmann::json request = nlohmann::json::parse(cc.body);
			event.reply("[Game Link](" + request.at("challenge").at("url").get<std::string>() + ")");
		}
		catch (const std::exception& e)
		{
			event.reply(dpp::message(event.command.get_channel().id, ErrorEmbed::ierror(e.what())));
		}
	});
}

dpp::slashcommand ChessCommand::get_api_obj(dpp::cluster& bot)
{
	return dpp::slashcommand(this->get_trigger(), this->get_description(), bot.me.id).
		set_default_permissions(this->get_required_perms()).
		set_type(dpp::ctxm_chat_input);
}